<Project ToolsVersion="15.0">

  <PropertyGroup>
    <WebSdkRoot Condition="'$(WebSdkRoot)' == ''">..\</WebSdkRoot>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(PackageVersion)' == '' ">

    <!-- If $(PB_VersionStamp) is empty and $(PB_IsStable) is not true, then a default PackageBuildQuality will be added. -->
    <PackageReleaseVersion Condition="'$(PackageReleaseVersion)' == '' ">2.1.500</PackageReleaseVersion>
    <PackageBuildQuality>$(PB_VersionStamp)</PackageBuildQuality>
    <PackageBuildQuality Condition=" '$(PackageBuildQuality)' == '' And '$(PB_IsStable)' != 'true' ">preview1</PackageBuildQuality>
    <PackageDateTime Condition="'$(PackageDateTime)' == ''">$([System.DateTime]::Now.ToString("yyyyMMdd"))</PackageDateTime>
    <PackageBuildNumber Condition="'$(PackageBuildNumber)' == ''">0</PackageBuildNumber>
    <PackageBuildNumber Condition="'$(PackageBuildNumber)' == '0' And '$(BUILD_BUILDNUMBER)' != ''">$(BUILD_BUILDNUMBER)</PackageBuildNumber>

    <AssemblyReleaseVersion>$(PackageReleaseVersion).$([MSBuild]::Modulo($(PackageBuildNumber), 65535))</AssemblyReleaseVersion>

    <PackageVersion>$(PackageReleaseVersion)</PackageVersion>
    <PackageVersion Condition="'$(PackageBuildQuality)' != ''">$(PackageReleaseVersion)-$(PackageBuildQuality)</PackageVersion>
    <PackageVersion Condition="'$(PB_IsStable)' != 'true'">$(PackageVersion)-$(PackageDateTime)-$(PackageBuildNumber)</PackageVersion>
  </PropertyGroup>

  <PropertyGroup>
    <!--NuGet Properties-->
    <BuildOutputTargetFolder>tools</BuildOutputTargetFolder>
    <IncludeBuildOutput>False</IncludeBuildOutput>

    <PackageName>$(MSBuildProjectName)</PackageName>
    <Title>$(MSBuildProjectName)</Title>
    <Version>$(PackageVersion)</Version>
    <Description>This package contains MSBuild targets and tasks for building and publishing ASP.NET Core projects. This package is required for building and publishing ASP.NET Core projects.</Description>

    <Authors>Microsoft</Authors>
    <ProjectUrl>https://github.com/aspnet/websdk</ProjectUrl>
    <LicenseUrl>https://go.microsoft.com/fwlink/?LinkId=320539</LicenseUrl>
    <ImageUrl>http://go.microsoft.com/fwlink/?LinkID=288859</ImageUrl>
    <Tags>WebSdk</Tags>
    <Company>Microsoft</Company>
    <Copyright>Copyright Â© Microsoft Corporation</Copyright>
    <RequireLicenseAcceptance>true</RequireLicenseAcceptance>

    <GenerateAssemblyInfo Condition="'$(BuildingInsideVisualStudio)' != ''">False</GenerateAssemblyInfo>
    <GenerateAssemblyFileVersionAttribute>False</GenerateAssemblyFileVersionAttribute>
    <GenerateAssemblyVersionAttribute>False</GenerateAssemblyVersionAttribute>
    <GenerateAssemblyInformationalVersionAttribute>False</GenerateAssemblyInformationalVersionAttribute>
  </PropertyGroup>

  <PropertyGroup>
    <AssemblyOriginatorKeyFile>$(WebSdkRoot)\tools\Key.snk</AssemblyOriginatorKeyFile>
    <SignAssembly>true</SignAssembly>
    <DelaySign>true</DelaySign>
  </PropertyGroup>

  <PropertyGroup>
    <ArtifactsDir>$(WebSdkRoot)\artifacts\</ArtifactsDir>
    <GitInfoFile>$(ArtifactsDir)GitInfo.cs</GitInfoFile>
    <GitInfoProps>$(ArtifactsDir)GitInfo.props</GitInfoProps>
  </PropertyGroup>

  <Target Name="CollectGitInfo">
    <PropertyGroup>
      <GitInfoCommitCount Condition="'$(COMMIT_HASH)' != ''">$(COMMIT_COUNT)</GitInfoCommitCount>
      <GitInfoCommitHash Condition="'$(COMMIT_HASH)' != ''">$(COMMIT_HASH)</GitInfoCommitHash>
      <GitExitCode>0</GitExitCode>
    </PropertyGroup>

    <Exec Command="git rev-list --count HEAD" ConsoleToMSBuild="true" Condition="'$(COMMIT_HASH)' == ''" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitInfoCommitCount" />
      <Output TaskParameter="ExitCode" PropertyName="GitInfoCommitCountExitCode" />
    </Exec>

    <Exec Command="git rev-parse HEAD" ConsoleToMSBuild="true" Condition="'$(COMMIT_HASH)' == ''" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="GitInfoCommitHash" />
      <Output TaskParameter="ExitCode" PropertyName="GitInfoCommitHashExitCode" />
    </Exec>

    <PropertyGroup Condition="'$(GitInfoCommitCountExitCode)' != '0'">
      <GitInfoCommitCount>0</GitInfoCommitCount>
    </PropertyGroup>

    <PropertyGroup Condition="'$(GitInfoCommitHashExitCode)' != '0'">
      <GitInfoCommitHash>UNKNOWN</GitInfoCommitHash>
    </PropertyGroup>

    <PropertyGroup>
      <GitCommitInfoContent>
        <![CDATA[
[assembly: System.Reflection.AssemblyVersion("$(AssemblyReleaseVersion)")]
[assembly: System.Reflection.AssemblyFileVersion("$(AssemblyReleaseVersion)")]
[assembly: System.Reflection.AssemblyInformationalVersion("$(PackageVersion)+$(GitInfoCommitCount).$(GitInfoCommitHash)")]

namespace Microsoft.NET.Sdk.Web
{
    internal static class GitInfo
    {
        public static string PackageVersion { get%3B } = "$(PackageVersion)"%3B
        public static string CommitCount { get%3B } = "$(GitInfoCommitCount)"%3B
        public static string CommitHash { get%3B } = "$(GitInfoCommitHash)"%3B
    }
}
]]>
      </GitCommitInfoContent>
      <GitInfoPropsContent>
        <![CDATA[
<Project ToolsVersion="15.0">
  <PropertyGroup>
    <Version>$(PackageReleaseVersion)</Version>
    <FileVersion>$(PackageReleaseVersion)</FileVersion>
    <InformationalVersion>$(PackageVersion)+$(GitInfoCommitCount).$(GitInfoCommitHash)</InformationalVersion>
    <PackageReleaseNotes>Commit Hash: $(GitInfoCommitHash)</PackageReleaseNotes>
  </PropertyGroup>
</Project>
]]>
      </GitInfoPropsContent>
    </PropertyGroup>

    <WriteLinesToFile File="$(GitInfoFile)"
                      Lines="$(GitCommitInfoContent)"
                      Overwrite="true" />

    <WriteLinesToFile File="$(GitInfoProps)"
                      Lines="$(GitInfoPropsContent)"
                      Overwrite="true" />
  </Target>

  <ItemGroup>
    <Compile Include="$(GitInfoFile)" Condition="Exists('$(GitInfoFile)')" Link="%(RecursiveDir)%(Filename)%(Extension)" />
    <Compile Include="$(WebSdkRoot)/src/GitInfo.cs" Condition="!Exists('$(GitInfoFile)')" Link="%(RecursiveDir)%(Filename)%(Extension)" />

  </ItemGroup>

  <Import Project="$(GitInfoProps)" Condition="Exists('$(GitInfoProps)')" />
</Project>
